/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import type { TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "set_portal_asset_data(asset,account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_market_token(asset,asset,account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_usdt_token(asset,account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "create_asa(string,string,string)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "mint_yield_token_pair(uint64,uint64,account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "mint_portable_token(uint64,account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "mint_usdt_token(uint64,account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
  },
  "state": {
    "global": {
      "num_byte_slices": 3,
      "num_uints": 4
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "market_token_commander": {
          "type": "bytes",
          "key": "market_token_commander",
          "descr": ""
        },
        "portable_asset_id": {
          "type": "uint64",
          "key": "portable_asset_id",
          "descr": ""
        },
        "portal_asset_commander": {
          "type": "bytes",
          "key": "portal_asset_commander",
          "descr": ""
        },
        "principal_token_id": {
          "type": "uint64",
          "key": "principal_token_id",
          "descr": ""
        },
        "usdt_token_commander": {
          "type": "bytes",
          "key": "usdt_token_commander",
          "descr": ""
        },
        "usdt_token_id": {
          "type": "uint64",
          "key": "usdt_token_id",
          "descr": ""
        },
        "yield_token_id": {
          "type": "uint64",
          "key": "yield_token_id",
          "descr": ""
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "reserve",
    "methods": [
      {
        "name": "set_portal_asset_data",
        "args": [
          {
            "type": "asset",
            "name": "asset"
          },
          {
            "type": "account",
            "name": "commander"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "set_market_token",
        "args": [
          {
            "type": "asset",
            "name": "principal_token"
          },
          {
            "type": "asset",
            "name": "yield_token"
          },
          {
            "type": "account",
            "name": "commander"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "set_usdt_token",
        "args": [
          {
            "type": "asset",
            "name": "asset"
          },
          {
            "type": "account",
            "name": "commander"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "create_asa",
        "args": [
          {
            "type": "string",
            "name": "name"
          },
          {
            "type": "string",
            "name": "unit_name"
          },
          {
            "type": "string",
            "name": "url"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "mint_yield_token_pair",
        "args": [
          {
            "type": "uint64",
            "name": "principal_amount"
          },
          {
            "type": "uint64",
            "name": "yield_amount"
          },
          {
            "type": "account",
            "name": "to"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "mint_portable_token",
        "args": [
          {
            "type": "uint64",
            "name": "amount"
          },
          {
            "type": "account",
            "name": "to"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "mint_usdt_token",
        "args": [
          {
            "type": "uint64",
            "name": "amount"
          },
          {
            "type": "account",
            "name": "to"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "no_op": "CREATE"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the Reserve smart contract.
 */
export type Reserve = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'set_portal_asset_data(asset,account)void' | 'set_portal_asset_data', {
      argsObj: {
        asset: number | bigint
        commander: string | Uint8Array
      }
      argsTuple: [asset: number | bigint, commander: string | Uint8Array]
      returns: void
    }>
    & Record<'set_market_token(asset,asset,account)void' | 'set_market_token', {
      argsObj: {
        principal_token: number | bigint
        yield_token: number | bigint
        commander: string | Uint8Array
      }
      argsTuple: [principal_token: number | bigint, yield_token: number | bigint, commander: string | Uint8Array]
      returns: void
    }>
    & Record<'set_usdt_token(asset,account)void' | 'set_usdt_token', {
      argsObj: {
        asset: number | bigint
        commander: string | Uint8Array
      }
      argsTuple: [asset: number | bigint, commander: string | Uint8Array]
      returns: void
    }>
    & Record<'create_asa(string,string,string)uint64' | 'create_asa', {
      argsObj: {
        name: string
        unit_name: string
        url: string
      }
      argsTuple: [name: string, unit_name: string, url: string]
      returns: bigint
    }>
    & Record<'mint_yield_token_pair(uint64,uint64,account)void' | 'mint_yield_token_pair', {
      argsObj: {
        principal_amount: bigint | number
        yield_amount: bigint | number
        to: string | Uint8Array
      }
      argsTuple: [principal_amount: bigint | number, yield_amount: bigint | number, to: string | Uint8Array]
      returns: void
    }>
    & Record<'mint_portable_token(uint64,account)void' | 'mint_portable_token', {
      argsObj: {
        amount: bigint | number
        to: string | Uint8Array
      }
      argsTuple: [amount: bigint | number, to: string | Uint8Array]
      returns: void
    }>
    & Record<'mint_usdt_token(uint64,account)void' | 'mint_usdt_token', {
      argsObj: {
        amount: bigint | number
        to: string | Uint8Array
      }
      argsTuple: [amount: bigint | number, to: string | Uint8Array]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'market_token_commander'?: BinaryState
      'portable_asset_id'?: IntegerState
      'portal_asset_commander'?: BinaryState
      'principal_token_id'?: IntegerState
      'usdt_token_commander'?: BinaryState
      'usdt_token_id'?: IntegerState
      'yield_token_id'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type ReserveSig = keyof Reserve['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends ReserveSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the Reserve smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends ReserveSig> = Reserve['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Reserve smart contract to the method's return type
 */
export type MethodReturn<TSignature extends ReserveSig> = Reserve['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type ReserveCreateCalls = (typeof ReserveCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type ReserveCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type ReserveDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: ReserveCreateCalls) => ReserveCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class ReserveCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the reserve smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the set_portal_asset_data(asset,account)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setPortalAssetData(args: MethodArgs<'set_portal_asset_data(asset,account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_portal_asset_data(asset,account)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.asset, args.commander],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_market_token(asset,asset,account)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setMarketToken(args: MethodArgs<'set_market_token(asset,asset,account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_market_token(asset,asset,account)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.principal_token, args.yield_token, args.commander],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_usdt_token(asset,account)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setUsdtToken(args: MethodArgs<'set_usdt_token(asset,account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_usdt_token(asset,account)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.asset, args.commander],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the create_asa(string,string,string)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createAsa(args: MethodArgs<'create_asa(string,string,string)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'create_asa(string,string,string)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.name, args.unit_name, args.url],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the mint_yield_token_pair(uint64,uint64,account)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static mintYieldTokenPair(args: MethodArgs<'mint_yield_token_pair(uint64,uint64,account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'mint_yield_token_pair(uint64,uint64,account)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.principal_amount, args.yield_amount, args.to],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the mint_portable_token(uint64,account)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static mintPortableToken(args: MethodArgs<'mint_portable_token(uint64,account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'mint_portable_token(uint64,account)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.amount, args.to],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the mint_usdt_token(uint64,account)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static mintUsdtToken(args: MethodArgs<'mint_usdt_token(uint64,account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'mint_usdt_token(uint64,account)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.amount, args.to],
      ...params,
    }
  }
}

/**
 * A client to make calls to the reserve smart contract
 */
export class ReserveClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `ReserveClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Reserve['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the reserve smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: ReserveDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(ReserveCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the reserve smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.create(args) as unknown as Promise<AppCallTransactionResultOfType<undefined>>
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the reserve smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the set_portal_asset_data(asset,account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setPortalAssetData(args: MethodArgs<'set_portal_asset_data(asset,account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ReserveCallFactory.setPortalAssetData(args, params))
  }

  /**
   * Calls the set_market_token(asset,asset,account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setMarketToken(args: MethodArgs<'set_market_token(asset,asset,account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ReserveCallFactory.setMarketToken(args, params))
  }

  /**
   * Calls the set_usdt_token(asset,account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setUsdtToken(args: MethodArgs<'set_usdt_token(asset,account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ReserveCallFactory.setUsdtToken(args, params))
  }

  /**
   * Calls the create_asa(string,string,string)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createAsa(args: MethodArgs<'create_asa(string,string,string)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ReserveCallFactory.createAsa(args, params))
  }

  /**
   * Calls the mint_yield_token_pair(uint64,uint64,account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public mintYieldTokenPair(args: MethodArgs<'mint_yield_token_pair(uint64,uint64,account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ReserveCallFactory.mintYieldTokenPair(args, params))
  }

  /**
   * Calls the mint_portable_token(uint64,account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public mintPortableToken(args: MethodArgs<'mint_portable_token(uint64,account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ReserveCallFactory.mintPortableToken(args, params))
  }

  /**
   * Calls the mint_usdt_token(uint64,account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public mintUsdtToken(args: MethodArgs<'mint_usdt_token(uint64,account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ReserveCallFactory.mintUsdtToken(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<Reserve['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get market_token_commander() {
        return ReserveClient.getBinaryState(state, 'market_token_commander')
      },
      get portable_asset_id() {
        return ReserveClient.getIntegerState(state, 'portable_asset_id')
      },
      get portal_asset_commander() {
        return ReserveClient.getBinaryState(state, 'portal_asset_commander')
      },
      get principal_token_id() {
        return ReserveClient.getIntegerState(state, 'principal_token_id')
      },
      get usdt_token_commander() {
        return ReserveClient.getBinaryState(state, 'usdt_token_commander')
      },
      get usdt_token_id() {
        return ReserveClient.getIntegerState(state, 'usdt_token_id')
      },
      get yield_token_id() {
        return ReserveClient.getIntegerState(state, 'yield_token_id')
      },
    }
  }

  public compose(): ReserveComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      setPortalAssetData(args: MethodArgs<'set_portal_asset_data(asset,account)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setPortalAssetData(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setMarketToken(args: MethodArgs<'set_market_token(asset,asset,account)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setMarketToken(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setUsdtToken(args: MethodArgs<'set_usdt_token(asset,account)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setUsdtToken(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      createAsa(args: MethodArgs<'create_asa(string,string,string)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createAsa(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      mintYieldTokenPair(args: MethodArgs<'mint_yield_token_pair(uint64,uint64,account)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.mintYieldTokenPair(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      mintPortableToken(args: MethodArgs<'mint_portable_token(uint64,account)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.mintPortableToken(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      mintUsdtToken(args: MethodArgs<'mint_usdt_token(uint64,account)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.mintUsdtToken(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as ReserveComposer
  }
}
export type ReserveComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the set_portal_asset_data(asset,account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setPortalAssetData(args: MethodArgs<'set_portal_asset_data(asset,account)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): ReserveComposer<[...TReturns, MethodReturn<'set_portal_asset_data(asset,account)void'>]>

  /**
   * Calls the set_market_token(asset,asset,account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setMarketToken(args: MethodArgs<'set_market_token(asset,asset,account)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): ReserveComposer<[...TReturns, MethodReturn<'set_market_token(asset,asset,account)void'>]>

  /**
   * Calls the set_usdt_token(asset,account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setUsdtToken(args: MethodArgs<'set_usdt_token(asset,account)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): ReserveComposer<[...TReturns, MethodReturn<'set_usdt_token(asset,account)void'>]>

  /**
   * Calls the create_asa(string,string,string)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createAsa(args: MethodArgs<'create_asa(string,string,string)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): ReserveComposer<[...TReturns, MethodReturn<'create_asa(string,string,string)uint64'>]>

  /**
   * Calls the mint_yield_token_pair(uint64,uint64,account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mintYieldTokenPair(args: MethodArgs<'mint_yield_token_pair(uint64,uint64,account)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): ReserveComposer<[...TReturns, MethodReturn<'mint_yield_token_pair(uint64,uint64,account)void'>]>

  /**
   * Calls the mint_portable_token(uint64,account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mintPortableToken(args: MethodArgs<'mint_portable_token(uint64,account)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): ReserveComposer<[...TReturns, MethodReturn<'mint_portable_token(uint64,account)void'>]>

  /**
   * Calls the mint_usdt_token(uint64,account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mintUsdtToken(args: MethodArgs<'mint_usdt_token(uint64,account)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): ReserveComposer<[...TReturns, MethodReturn<'mint_usdt_token(uint64,account)void'>]>

  /**
   * Makes a clear_state call to an existing instance of the reserve smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): ReserveComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): ReserveComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Executes the transaction group and returns an array of results
   */
  execute(): Promise<ReserveComposerResults<TReturns>>
}
export type ReserveComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
