/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import type { TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "configure(uint64,address,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "portal_transfer(byte[])byte[]": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDgKaW50Y2Jsb2NrIDAgMSA2CmJ5dGVjYmxvY2sgMHggMHg3MjY1NzM2NTcyNzY2NTVmNjk2NCAweDYxNzM3MzY1NzQ1ZjY5NjQgMHg2MzZmNzI2NTVmNjE3MDcwNWY2OTY0IDB4NzM3NDZmNzI2MTY3NjU1ZjYxNjM2MzZmNzU2ZTc0CnR4biBOdW1BcHBBcmdzCmludGNfMCAvLyAwCj09CmJueiBtYWluX2w2CnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4MWJmMTY5ZTEgLy8gImNvbmZpZ3VyZSh1aW50NjQsYWRkcmVzcyx1aW50NjQsdWludDY0KXZvaWQiCj09CmJueiBtYWluX2w1CnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4OTAzZjQ1MzUgLy8gInBvcnRhbF90cmFuc2ZlcihieXRlW10pYnl0ZVtdIgo9PQpibnogbWFpbl9sNAplcnIKbWFpbl9sNDoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKY2FsbHN1YiBwb3J0YWx0cmFuc2ZlcmNhc3Rlcl80CmludGNfMSAvLyAxCnJldHVybgptYWluX2w1Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydApjYWxsc3ViIGNvbmZpZ3VyZWNhc3Rlcl8zCmludGNfMSAvLyAxCnJldHVybgptYWluX2w2Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CmJueiBtYWluX2w4CmVycgptYWluX2w4Ogp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAo9PQphc3NlcnQKaW50Y18xIC8vIDEKcmV0dXJuCgovLyBfbWludAptaW50XzA6CnByb3RvIDIgMAppdHhuX2JlZ2luCmludGNfMiAvLyBhcHBsCml0eG5fZmllbGQgVHlwZUVudW0KYnl0ZWNfMSAvLyAicmVzZXJ2ZV9pZCIKYXBwX2dsb2JhbF9nZXQKaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECmZyYW1lX2RpZyAtMQppdHhuX2ZpZWxkIEFjY291bnRzCnB1c2hieXRlcyAweDJkYjgzNzM0IC8vICJtaW50X3BvcnRhYmxlX3Rva2VuKHVpbnQ2NCxhY2NvdW50KXZvaWQiCml0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCmZyYW1lX2RpZyAtMgppdG9iCml0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCnB1c2hieXRlcyAweDAxIC8vIDB4MDEKaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKYnl0ZWNfMiAvLyAiYXNzZXRfaWQiCmFwcF9nbG9iYWxfZ2V0Cml0eG5fZmllbGQgQXNzZXRzCml0eG5fc3VibWl0CnJldHN1YgoKLy8gY29uZmlndXJlCmNvbmZpZ3VyZV8xOgpwcm90byA0IDAKdHhuIFNlbmRlcgpnbG9iYWwgQ3JlYXRvckFkZHJlc3MKPT0KLy8gdW5hdXRob3JpemVkCmFzc2VydAppbnRjXzAgLy8gMApieXRlY18zIC8vICJjb3JlX2FwcF9pZCIKYXBwX2dsb2JhbF9nZXRfZXgKc3RvcmUgMQpzdG9yZSAwCmxvYWQgMQohCmFzc2VydApieXRlY18zIC8vICJjb3JlX2FwcF9pZCIKZnJhbWVfZGlnIC00CmFwcF9nbG9iYWxfcHV0CmludGNfMCAvLyAwCmJ5dGVjIDQgLy8gInN0b3JhZ2VfYWNjb3VudCIKYXBwX2dsb2JhbF9nZXRfZXgKc3RvcmUgMwpzdG9yZSAyCmxvYWQgMwohCmFzc2VydApieXRlYyA0IC8vICJzdG9yYWdlX2FjY291bnQiCmZyYW1lX2RpZyAtMwphcHBfZ2xvYmFsX3B1dApieXRlY18yIC8vICJhc3NldF9pZCIKZnJhbWVfZGlnIC0yCmFwcF9nbG9iYWxfcHV0CmJ5dGVjXzEgLy8gInJlc2VydmVfaWQiCmZyYW1lX2RpZyAtMQphcHBfZ2xvYmFsX3B1dApyZXRzdWIKCi8vIHBvcnRhbF90cmFuc2Zlcgpwb3J0YWx0cmFuc2Zlcl8yOgpwcm90byAxIDEKYnl0ZWNfMCAvLyAiIgppbnRjXzAgLy8gMApkdXBuIDUKYnl0ZWNfMCAvLyAiIgppbnRjXzAgLy8gMApkdXBuIDIKYnl0ZWNfMCAvLyAiIgpkdXAKaW50Y18wIC8vIDAKYnl0ZWNfMCAvLyAiIgppbnRjXzAgLy8gMApieXRlY18wIC8vICIiCmR1cG4gMgpmcmFtZV9kaWcgLTEKZXh0cmFjdCAyIDAKaW50Y18wIC8vIDAKZ2V0Ynl0ZQpmcmFtZV9idXJ5IDEKZnJhbWVfZGlnIC0xCmV4dHJhY3QgMiAwCmludGNfMSAvLyAxCmV4dHJhY3RfdWludDMyCmZyYW1lX2J1cnkgMgpmcmFtZV9kaWcgLTEKZXh0cmFjdCAyIDAKcHVzaGludCA1IC8vIDUKZ2V0Ynl0ZQpmcmFtZV9idXJ5IDMKZnJhbWVfZGlnIC0xCmV4dHJhY3QgMiAwCmludGNfMiAvLyA2CmZyYW1lX2RpZyAzCnB1c2hpbnQgNjYgLy8gNjYKKgorCmRpZyAxCmxlbgpzdWJzdHJpbmczCnN0b3JlIDQKbG9hZCA0CmludGNfMCAvLyAwCmV4dHJhY3RfdWludDMyCmZyYW1lX2J1cnkgNApsb2FkIDQKcHVzaGludCA0IC8vIDQKZXh0cmFjdF91aW50MzIKZnJhbWVfYnVyeSA1CmxvYWQgNApwdXNoaW50IDggLy8gOApleHRyYWN0X3VpbnQxNgpmcmFtZV9idXJ5IDYKbG9hZCA0CmV4dHJhY3QgMTAgMzIKZnJhbWVfYnVyeSA3CmxvYWQgNApwdXNoaW50IDQyIC8vIDQyCmV4dHJhY3RfdWludDY0CmZyYW1lX2J1cnkgOApsb2FkIDQKcHVzaGludCA1MCAvLyA1MApnZXRieXRlCmZyYW1lX2J1cnkgOQpsb2FkIDQKcHVzaGludCA1MSAvLyA1MQpnZXRieXRlCmZyYW1lX2J1cnkgMTAKbG9hZCA0CmV4dHJhY3QgNTIgMzIKZnJhbWVfYnVyeSAxMQpsb2FkIDQKZXh0cmFjdCA4NCAzMgpmcmFtZV9idXJ5IDEyCmxvYWQgNApwdXNoaW50IDExNiAvLyAxMTYKZXh0cmFjdF91aW50MTYKZnJhbWVfYnVyeSAxMwpsb2FkIDQKZXh0cmFjdCAxMTggMzIKZnJhbWVfYnVyeSAxNApsb2FkIDQKcHVzaGludCAxNTAgLy8gMTUwCmV4dHJhY3RfdWludDE2CmZyYW1lX2J1cnkgMTUKbG9hZCA0CmV4dHJhY3QgMTUyIDMyCmZyYW1lX2J1cnkgMTYKbG9hZCA0CmV4dHJhY3QgMTg0IDMyCmZyYW1lX2J1cnkgMTcKbG9hZCA0CmV4dHJhY3QgMjE2IDAKZnJhbWVfYnVyeSAxOApmcmFtZV9kaWcgMTgKbGVuCml0b2IKZXh0cmFjdCA2IDAKZnJhbWVfZGlnIDE4CmNvbmNhdApmcmFtZV9idXJ5IDE4CmZyYW1lX2RpZyAxMQpmcmFtZV9kaWcgMTcKY2FsbHN1YiBtaW50XzAKcmV0c3ViCgovLyBjb25maWd1cmVfY2FzdGVyCmNvbmZpZ3VyZWNhc3Rlcl8zOgpwcm90byAwIDAKaW50Y18wIC8vIDAKYnl0ZWNfMCAvLyAiIgppbnRjXzAgLy8gMApkdXAKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQpidG9pCmZyYW1lX2J1cnkgMAp0eG5hIEFwcGxpY2F0aW9uQXJncyAyCmZyYW1lX2J1cnkgMQp0eG5hIEFwcGxpY2F0aW9uQXJncyAzCmJ0b2kKZnJhbWVfYnVyeSAyCnR4bmEgQXBwbGljYXRpb25BcmdzIDQKYnRvaQpmcmFtZV9idXJ5IDMKZnJhbWVfZGlnIDAKZnJhbWVfZGlnIDEKZnJhbWVfZGlnIDIKZnJhbWVfZGlnIDMKY2FsbHN1YiBjb25maWd1cmVfMQpyZXRzdWIKCi8vIHBvcnRhbF90cmFuc2Zlcl9jYXN0ZXIKcG9ydGFsdHJhbnNmZXJjYXN0ZXJfNDoKcHJvdG8gMCAwCmJ5dGVjXzAgLy8gIiIKZHVwCnR4bmEgQXBwbGljYXRpb25BcmdzIDEKZnJhbWVfYnVyeSAxCmZyYW1lX2RpZyAxCmNhbGxzdWIgcG9ydGFsdHJhbnNmZXJfMgpmcmFtZV9idXJ5IDAKcHVzaGJ5dGVzIDB4MTUxZjdjNzUgLy8gMHgxNTFmN2M3NQpmcmFtZV9kaWcgMApjb25jYXQKbG9nCnJldHN1Yg==",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 3
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "asset_id": {
          "type": "uint64",
          "key": "asset_id",
          "descr": ""
        },
        "core_app_id": {
          "type": "uint64",
          "key": "core_app_id",
          "descr": ""
        },
        "reserve_id": {
          "type": "uint64",
          "key": "reserve_id",
          "descr": ""
        },
        "storage_account": {
          "type": "bytes",
          "key": "storage_account",
          "descr": ""
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "portal",
    "methods": [
      {
        "name": "configure",
        "args": [
          {
            "type": "uint64",
            "name": "app_id"
          },
          {
            "type": "address",
            "name": "storage_acc"
          },
          {
            "type": "uint64",
            "name": "asset_id"
          },
          {
            "type": "uint64",
            "name": "reserve_id"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "portal_transfer",
        "args": [
          {
            "type": "byte[]",
            "name": "vaa"
          }
        ],
        "returns": {
          "type": "byte[]"
        }
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "no_op": "CREATE"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the Portal smart contract.
 */
export type Portal = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'configure(uint64,address,uint64,uint64)void' | 'configure', {
      argsObj: {
        app_id: bigint | number
        storage_acc: string
        asset_id: bigint | number
        reserve_id: bigint | number
      }
      argsTuple: [app_id: bigint | number, storage_acc: string, asset_id: bigint | number, reserve_id: bigint | number]
      returns: void
    }>
    & Record<'portal_transfer(byte[])byte[]' | 'portal_transfer', {
      argsObj: {
        vaa: Uint8Array
      }
      argsTuple: [vaa: Uint8Array]
      returns: Uint8Array
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'asset_id'?: IntegerState
      'core_app_id'?: IntegerState
      'reserve_id'?: IntegerState
      'storage_account'?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type PortalSig = keyof Portal['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends PortalSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the Portal smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends PortalSig> = Portal['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Portal smart contract to the method's return type
 */
export type MethodReturn<TSignature extends PortalSig> = Portal['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type PortalCreateCalls = (typeof PortalCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type PortalCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type PortalDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: PortalCreateCalls) => PortalCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class PortalCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the portal smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the configure(uint64,address,uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static configure(args: MethodArgs<'configure(uint64,address,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'configure(uint64,address,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.app_id, args.storage_acc, args.asset_id, args.reserve_id],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the portal_transfer(byte[])byte[] ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static portalTransfer(args: MethodArgs<'portal_transfer(byte[])byte[]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'portal_transfer(byte[])byte[]' as const,
      methodArgs: Array.isArray(args) ? args : [args.vaa],
      ...params,
    }
  }
}

/**
 * A client to make calls to the portal smart contract
 */
export class PortalClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `PortalClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Portal['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the portal smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: PortalDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(PortalCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the portal smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.create(args) as unknown as Promise<AppCallTransactionResultOfType<undefined>>
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the portal smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the configure(uint64,address,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public configure(args: MethodArgs<'configure(uint64,address,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PortalCallFactory.configure(args, params))
  }

  /**
   * Calls the portal_transfer(byte[])byte[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public portalTransfer(args: MethodArgs<'portal_transfer(byte[])byte[]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PortalCallFactory.portalTransfer(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<Portal['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get asset_id() {
        return PortalClient.getIntegerState(state, 'asset_id')
      },
      get core_app_id() {
        return PortalClient.getIntegerState(state, 'core_app_id')
      },
      get reserve_id() {
        return PortalClient.getIntegerState(state, 'reserve_id')
      },
      get storage_account() {
        return PortalClient.getBinaryState(state, 'storage_account')
      },
    }
  }

  public compose(): PortalComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      configure(args: MethodArgs<'configure(uint64,address,uint64,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.configure(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      portalTransfer(args: MethodArgs<'portal_transfer(byte[])byte[]'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.portalTransfer(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as PortalComposer
  }
}
export type PortalComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the configure(uint64,address,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  configure(args: MethodArgs<'configure(uint64,address,uint64,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): PortalComposer<[...TReturns, MethodReturn<'configure(uint64,address,uint64,uint64)void'>]>

  /**
   * Calls the portal_transfer(byte[])byte[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  portalTransfer(args: MethodArgs<'portal_transfer(byte[])byte[]'>, params?: AppClientCallCoreParams & CoreAppCallArgs): PortalComposer<[...TReturns, MethodReturn<'portal_transfer(byte[])byte[]'>]>

  /**
   * Makes a clear_state call to an existing instance of the portal smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): PortalComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): PortalComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Executes the transaction group and returns an array of results
   */
  execute(): Promise<PortalComposerResults<TReturns>>
}
export type PortalComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
