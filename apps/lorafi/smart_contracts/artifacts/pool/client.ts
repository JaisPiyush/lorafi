/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import type { TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "configure(string)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_lp_token_asset()uint64": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deposit(axfer,axfer,account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "burn(axfer,account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "swap(axfer,account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 8
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "asset_1_id": {
          "type": "uint64",
          "key": "asset_1_id",
          "descr": ""
        },
        "asset_1_reserve": {
          "type": "uint64",
          "key": "asset_1_reserve",
          "descr": ""
        },
        "asset_2_id": {
          "type": "uint64",
          "key": "asset_2_id",
          "descr": ""
        },
        "asset_2_reserve": {
          "type": "uint64",
          "key": "asset_2_reserve",
          "descr": ""
        },
        "has_configured": {
          "type": "uint64",
          "key": "has_configured",
          "descr": ""
        },
        "k_constant": {
          "type": "uint64",
          "key": "k_constant",
          "descr": ""
        },
        "lp_asset_id": {
          "type": "uint64",
          "key": "lp_asset_id",
          "descr": ""
        },
        "name": {
          "type": "bytes",
          "key": "name",
          "descr": "Name of the pool"
        },
        "total_supply": {
          "type": "uint64",
          "key": "total_supply",
          "descr": ""
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "pool",
    "methods": [
      {
        "name": "configure",
        "args": [
          {
            "type": "string",
            "name": "name"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "get_lp_token_asset",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "deposit",
        "args": [
          {
            "type": "axfer",
            "name": "asset_1"
          },
          {
            "type": "axfer",
            "name": "asset_2"
          },
          {
            "type": "account",
            "name": "to"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "burn",
        "args": [
          {
            "type": "axfer",
            "name": "asset"
          },
          {
            "type": "account",
            "name": "to"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "swap",
        "args": [
          {
            "type": "axfer",
            "name": "asset"
          },
          {
            "type": "account",
            "name": "to"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "no_op": "CREATE"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the Pool smart contract.
 */
export type Pool = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'configure(string)uint64' | 'configure', {
      argsObj: {
        name: string
      }
      argsTuple: [name: string]
      returns: bigint
    }>
    & Record<'get_lp_token_asset()uint64' | 'get_lp_token_asset', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'deposit(axfer,axfer,account)void' | 'deposit', {
      argsObj: {
        asset_1: TransactionToSign | Transaction | Promise<SendTransactionResult>
        asset_2: TransactionToSign | Transaction | Promise<SendTransactionResult>
        to: string | Uint8Array
      }
      argsTuple: [asset_1: TransactionToSign | Transaction | Promise<SendTransactionResult>, asset_2: TransactionToSign | Transaction | Promise<SendTransactionResult>, to: string | Uint8Array]
      returns: void
    }>
    & Record<'burn(axfer,account)void' | 'burn', {
      argsObj: {
        asset: TransactionToSign | Transaction | Promise<SendTransactionResult>
        to: string | Uint8Array
      }
      argsTuple: [asset: TransactionToSign | Transaction | Promise<SendTransactionResult>, to: string | Uint8Array]
      returns: void
    }>
    & Record<'swap(axfer,account)void' | 'swap', {
      argsObj: {
        asset: TransactionToSign | Transaction | Promise<SendTransactionResult>
        to: string | Uint8Array
      }
      argsTuple: [asset: TransactionToSign | Transaction | Promise<SendTransactionResult>, to: string | Uint8Array]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'asset_1_id'?: IntegerState
      'asset_1_reserve'?: IntegerState
      'asset_2_id'?: IntegerState
      'asset_2_reserve'?: IntegerState
      'has_configured'?: IntegerState
      'k_constant'?: IntegerState
      'lp_asset_id'?: IntegerState
      /**
       * Name of the pool
       */
      'name'?: BinaryState
      'total_supply'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type PoolSig = keyof Pool['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends PoolSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the Pool smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends PoolSig> = Pool['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Pool smart contract to the method's return type
 */
export type MethodReturn<TSignature extends PoolSig> = Pool['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type PoolCreateCalls = (typeof PoolCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type PoolCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type PoolDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: PoolCreateCalls) => PoolCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class PoolCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the pool smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the configure(string)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static configure(args: MethodArgs<'configure(string)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'configure(string)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.name],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_lp_token_asset()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getLpTokenAsset(args: MethodArgs<'get_lp_token_asset()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_lp_token_asset()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the deposit(axfer,axfer,account)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static deposit(args: MethodArgs<'deposit(axfer,axfer,account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'deposit(axfer,axfer,account)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.asset_1, args.asset_2, args.to],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the burn(axfer,account)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static burn(args: MethodArgs<'burn(axfer,account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'burn(axfer,account)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.asset, args.to],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the swap(axfer,account)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static swap(args: MethodArgs<'swap(axfer,account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'swap(axfer,account)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.asset, args.to],
      ...params,
    }
  }
}

/**
 * A client to make calls to the pool smart contract
 */
export class PoolClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `PoolClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Pool['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the pool smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: PoolDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(PoolCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the pool smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.create(args) as unknown as Promise<AppCallTransactionResultOfType<undefined>>
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the pool smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the configure(string)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public configure(args: MethodArgs<'configure(string)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PoolCallFactory.configure(args, params))
  }

  /**
   * Calls the get_lp_token_asset()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getLpTokenAsset(args: MethodArgs<'get_lp_token_asset()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PoolCallFactory.getLpTokenAsset(args, params))
  }

  /**
   * Calls the deposit(axfer,axfer,account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public deposit(args: MethodArgs<'deposit(axfer,axfer,account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PoolCallFactory.deposit(args, params))
  }

  /**
   * Calls the burn(axfer,account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public burn(args: MethodArgs<'burn(axfer,account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PoolCallFactory.burn(args, params))
  }

  /**
   * Calls the swap(axfer,account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public swap(args: MethodArgs<'swap(axfer,account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PoolCallFactory.swap(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<Pool['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get asset_1_id() {
        return PoolClient.getIntegerState(state, 'asset_1_id')
      },
      get asset_1_reserve() {
        return PoolClient.getIntegerState(state, 'asset_1_reserve')
      },
      get asset_2_id() {
        return PoolClient.getIntegerState(state, 'asset_2_id')
      },
      get asset_2_reserve() {
        return PoolClient.getIntegerState(state, 'asset_2_reserve')
      },
      get has_configured() {
        return PoolClient.getIntegerState(state, 'has_configured')
      },
      get k_constant() {
        return PoolClient.getIntegerState(state, 'k_constant')
      },
      get lp_asset_id() {
        return PoolClient.getIntegerState(state, 'lp_asset_id')
      },
      get name() {
        return PoolClient.getBinaryState(state, 'name')
      },
      get total_supply() {
        return PoolClient.getIntegerState(state, 'total_supply')
      },
    }
  }

  public compose(): PoolComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      configure(args: MethodArgs<'configure(string)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.configure(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getLpTokenAsset(args: MethodArgs<'get_lp_token_asset()uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getLpTokenAsset(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      deposit(args: MethodArgs<'deposit(axfer,axfer,account)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.deposit(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      burn(args: MethodArgs<'burn(axfer,account)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.burn(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      swap(args: MethodArgs<'swap(axfer,account)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.swap(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as PoolComposer
  }
}
export type PoolComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the configure(string)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  configure(args: MethodArgs<'configure(string)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): PoolComposer<[...TReturns, MethodReturn<'configure(string)uint64'>]>

  /**
   * Calls the get_lp_token_asset()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getLpTokenAsset(args: MethodArgs<'get_lp_token_asset()uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): PoolComposer<[...TReturns, MethodReturn<'get_lp_token_asset()uint64'>]>

  /**
   * Calls the deposit(axfer,axfer,account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deposit(args: MethodArgs<'deposit(axfer,axfer,account)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): PoolComposer<[...TReturns, MethodReturn<'deposit(axfer,axfer,account)void'>]>

  /**
   * Calls the burn(axfer,account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  burn(args: MethodArgs<'burn(axfer,account)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): PoolComposer<[...TReturns, MethodReturn<'burn(axfer,account)void'>]>

  /**
   * Calls the swap(axfer,account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  swap(args: MethodArgs<'swap(axfer,account)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): PoolComposer<[...TReturns, MethodReturn<'swap(axfer,account)void'>]>

  /**
   * Makes a clear_state call to an existing instance of the pool smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): PoolComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): PoolComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Executes the transaction group and returns an array of results
   */
  execute(): Promise<PoolComposerResults<TReturns>>
}
export type PoolComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
